<diagram program="umletino" version="15.1"><zoom_level>5</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>220</x><y>410</y><w>365</w><h>205</h></coordinates><panel_attributes>SensorRing
--

sensor_bus_vec : SensorBus [ ]

--

+ SensorRing params : SensorBusParams)
+ ~SensorRing ()
   
+ getInterfaces() : SensorBus*[ ]

+ syncLight ()
+ resetDevices ()
+ enumerateDevices () : int
+ getEEPROM ()
+ requestTofMeasurement ()
+ fetchTofData ()
+ requestThermalMeasurement ()
+ fetchThermalData ()
+ stopThermalCalibration() : bool
+ startThermaltCalibration(window : size_t ) : bool

+ waitForAllTofMeasurementsReady()
+ waitForAllTofDataTransmissionsComplete()
+ waitForAllThermalMeasurementsReady()
+ waitForAllThermalDataTransmissionsComplete()
 
bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>195</x><y>1230</y><w>420</w><h>190</h></coordinates><panel_attributes>SensorBoard
--
- sensor_type : SensorBoardType
- can_interface : SockerCANFD

- tof : TofSensor
- thermal : ThermalSensor
- leds : LedLight

--
+ SensorBoard(tof_params : TofSensorParams, thermal_params : ThermalSensorParams, led_params : LedLightParams)
+ ~SensorBoard ()

+ getType () : SensorBoardType
+ setType (type : SensorBoardType)

+ tofClearDataFlag()
+ thermalClearDataFlag()
+ thermalReadEEPROM()
+ thermalStopCalibration()
+ thermalStartCalibration(size_t window)

+TofSensor* getTof() const;
+ThermalSensor* getThermal() const;
+ LedLight* getLed() const;


bg=white
fg=black
transparency=0
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>285</x><y>1470</y><w>255</w><h>230</h></coordinates><panel_attributes>ThermalSensor
--
- params : ThermalSensorParams

- eeprom : HTPA32Eeprom
- got_eeprom : volatile bool
- eeprom_flag : volatile bool
- eeprom_buff_offset : volatile int

--
+ ThermalSensor (ThermalSensorParams params)
+ ~ThermalSensor ()

+ readEEPROM()
+ gotEEPROM () : bool
+ stopCalibration() : bool
+ startCalibration(size_t window) : bool
+ getParams () : ThermalSensorParams

+ getLatestGrayscaleImage(error : SensorState&amp;) : GrayscaleImage*
+ getLatestFalseColorImage(error : SensorState&amp;) : FalseColorImage*
+ getLatestMeasurement(error : SensorState&amp;) : ThermalSensorMeasurement*

+ canCallback (frame : canfd_frame)
+ onClearDataFlag ()

- rotateLeftImage(image : GrayscaleImage&amp;);
- convertToFalseColorImage(image : GrayscaleImage&amp;) : FalseColorImage 
- convertToGrayscaleImage(temp_data_deg_c : TemperatureImage&amp;) : GrayscaleImage
- processMeasurement( ) : ThermalSensorMeasurement

bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>60</x><y>1470</y><w>215</w><h>230</h></coordinates><panel_attributes>LedLight
--
- params : LedLightParams

- canid_in : int
- canid_out : int



--
+ LedLight( params : LedPanelParams)
+ ~ LedLight ()

+ getParams : LedLightParams

bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>545</x><y>1470</y><w>255</w><h>230</h></coordinates><panel_attributes>TofSensor
--
- params : TofSensorParams

- rotation_matrix : Matrix3
- latest_measurement : TofSensorMeasurement
- rx_buffer : uint8_t[]
- rx_buffer_offset : unsigned int


--
+ TofSensor (params : TofSensorParams)
+ ~TofSensor ()

+ getParams () : TofSensorParams
+ getLatestMeasurement () : TofSensorMeasurement
- process_measurement (frame_id : int, data : uint8_t*, len : int)

+ canCallback (frame : canfd_frame)
+ onClearDataFlag ()

_+ transformPointCloud (point_data : Vector3[], rotation : Matrix3, translation : Vector3)_
_+ combineTofMeasurements (measurement_vec TofSensorMeasurement[])_




bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>445</x><y>1730</y><w>195</w><h>150</h></coordinates><panel_attributes>BaseSensor
--
- enable_flag : bool
- canid_data : int
- can_interface : SocketCANFD

# new_data_available_flag : bool
# new_data_in_buffer_flag : bool
# new_data
--
+ BaseSensor ()
+ ~BaseSensor ()

+ isEnabled () : bool
+ gotNewData () : bool
+ newDataAvailable () : bool

+ setCanidData ()
+ enableCanCallback ()
+ notify ()

bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>235</x><y>1415</y><w>20</w><h>65</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes><additional_attributes>10;10;10;110</additional_attributes></element><element><id>Relation</id><coordinates><x>570</x><y>1415</y><w>20</w><h>65</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes><additional_attributes>10;10;10;110</additional_attributes></element><element><id>Relation</id><coordinates><x>405</x><y>1415</y><w>20</w><h>65</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes><additional_attributes>10;10;10;110</additional_attributes></element><element><id>Relation</id><coordinates><x>395</x><y>1100</y><w>20</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=n</panel_attributes><additional_attributes>10;10;10;180</additional_attributes></element><element><id>Relation</id><coordinates><x>490</x><y>1695</y><w>15</w><h>45</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;70;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>575</x><y>1695</y><w>15</w><h>45</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;70;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>660</x><y>100</y><w>130</w><h>65</h></coordinates><panel_attributes>rclcpp::Node
--


--

bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>580</x><y>25</y><w>155</w><h>85</h></coordinates><panel_attributes>lt=-&gt;&gt;</panel_attributes><additional_attributes>10;10;290;10;290;150</additional_attributes></element><element><id>UMLClass</id><coordinates><x>220</x><y>735</y><w>365</w><h>370</h></coordinates><panel_attributes>SensorBus
--

params : SensorRingParams
sensor_bus_vec : SensorBus [ ]

enumerate_flag : bool 
enumerate_count : size_t
active_tof_sensors : size_t
active_thermal_sensors : size_t 
tof_measurement_count : size_t 
thermal_measurement_count : size_t 

--

+ SensorRing params : SensorBusParams)
+ ~SensorRing ()
   
+ getInterfaceName () : string
+ getSensorBoards () : SensorBoard*[ ]
+ isTofEnabled() : bool
+ isThermalEnabled() : bool
+ getSensorCount() : size_t
+ getEnumerationCount () : size_t

- allTofMeasurementsReady () : bool
- allTofMeasurementsReady (ready_sensor_count : int&amp;) : bool
- allThermalMeasurementsReady () : bool
- allThermalMeasurementsReady (ready_sensor_count : int&amp;) : bool
- allTofDataTransmissionsComplete () : bool
- allTofDataTransmissionsComplete (ready_sensor_count : int&amp;) : bool
- allThermalDataTransmissionsComplete () : bool
- allThermalDataTransmissionsComplete (ready_sensor_count : int&amp;) : bool
- allEEPROMDataTransmissionsComplete () : bool

- resetDevices ()
- enumerateDevices () : int
- syncLight ()
- setLights (mode : int, red : uint8_t, green : uint8_t, blue : uint8_t)
- requestEEPROM ()
- requestTofMeasurement ()
- fetchTofData ()
- requestThermalMeasurement ()
- fetchThermalData ()

+ stopThermalCalibration() : bool
+ startThermaltCalibration(window : size_t ) : bool
+ notify(frame : canfd_frame&amp;)
   
bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>395</x><y>610</y><w>20</w><h>135</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=n</panel_attributes><additional_attributes>10;10;10;250</additional_attributes></element><element><id>UMLPackage</id><coordinates><x>0</x><y>1180</y><w>870</w><h>720</h></coordinates><panel_attributes>PCB Abstraction
--
fg=white
bg=gray
layer=-1
transparency=50</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLPackage</id><coordinates><x>0</x><y>690</y><w>870</w><h>455</h></coordinates><panel_attributes>CAN Bus Abstraction
--
fg=white
bg=gray
layer=-1
transparency=50</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLPackage</id><coordinates><x>0</x><y>365</y><w>870</w><h>290</h></coordinates><panel_attributes>System Level Abstraction
--
fg=white
bg=gray
layer=-1
transparency=50</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>580</x><y>760</y><w>390</w><h>1225</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>760;2430;760;10;10;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>30</x><y>1260</y><w>135</w><h>75</h></coordinates><panel_attributes>The SensorBoard corresponds to the
physical circuit board. As one circuit board
may have multiple sensors it aggregates
the individual lower sensor abstraction classes.

The individual sensor abstractions implement
the SockerCan interface and directly receive
the can data from their corresponding sensor.

fg=black
bg=white
transparency=0
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>865</x><y>1975</y><w>130</w><h>65</h></coordinates><panel_attributes>edu::SockerCANFDObserver
--

--
/+ notify(canfd_frame) = 0/


bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>540</x><y>1875</y><w>365</w><h>110</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>710;200;710;110;10;110;10;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>25</x><y>735</y><w>135</w><h>75</h></coordinates><panel_attributes>The SensorBus is the abstraction of a single
CAN interface. It holds all information
corresponding to that interface including
a vector of all connected sensors.

The SensorBus also handles broadcast
messaging including messages that are sent
once and received by multiple sensor boards.

fg=black
bg=white
transparency=0
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>25</x><y>410</y><w>135</w><h>75</h></coordinates><panel_attributes>The SensorRing is the highest layer
abstraction and describes the whole
sensor system. The sensor system
includes sensors on multiple interfaces.


fg=black
bg=white
transparency=0
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>220</x><y>0</y><w>365</w><h>320</h></coordinates><panel_attributes>MeasurementManager
--

error : int
tof_enabled : bool
thermal_enabled : bool
is_running : bool
first_measurement : bool
last_tof_measurement_timestamp_s : double
last_thermal_measurement_timestamp_s : double

is_tof_throttled : bool
is_thermal_throttled : bool
thermal_measurement_flag : bool

state : MeasurementState
params : MeasurementManagerParams
sensor_ring : SensorRing*

pointcloud_pub : Publisher&lt;sensor_msgs::msg::PointCloud2&gt;
pc2_msg : PointCloud2
img_pub_vec : Publisher&lt;sensor_msgs::msg::Image&gt; [ ]
img_msg_vec : Image [ ]
colorimg_pub_vec : Publisher&lt;sensor_msgs::msg::Image&gt; [ ]
colorimg_msg_vec : Image [ ]

--

+ MeasurementManager(node_name : string)
+ ~MeasurementManager()
    
+ enableTofMeasurement (state : bool)
+ enableThermalMeasurement (state : bool)
+ run (params : MeasurementManagerParams, sensor_ring : SensorRing ) : int

- StateMachineWorker ()
- printTopologyOutput()
- publishToFData () : bool
- publishThermalData () : bool

- stopThermalCalibration()
- startThermalCalibration()
   
bg=white
fg=black
transparency=0</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>40</x><y>0</y><w>135</w><h>75</h></coordinates><panel_attributes>The MeasurementManager manages a
SensorRing object. The main component
is a state machine which handles the timing
of the measurements. In addition it handels
the ROS communication.


fg=black
bg=white
transparency=0
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>395</x><y>315</y><w>20</w><h>105</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=n</panel_attributes><additional_attributes>10;10;10;190</additional_attributes></element></diagram>